"""Command Line Interface Module"""

import argparse
import logging
import json
import os
from datetime import datetime
from typing import Optional, List
from ..attacks.llm_attacker import LLMAttacker, AttackType
from ..attacks.attack_generator import AttackGenerator

def setup_logging(verbose: bool = False):
    """Configure logging based on verbosity."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def save_report(results: List[dict], output_dir: str = "output"):
    """Save pentest report to a JSON file."""
    try:
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = os.path.join(output_dir, f"pentest_report_{timestamp}.json")
        
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        logging.info(f"Report saved to {output_file}")
        return output_file
    except Exception as e:
        logging.error(f"Error saving report: {str(e)}")
        return None

def main():
    """Main entry point for the CLI."""
    parser = argparse.ArgumentParser(description="LLM Pentesting Tool")
    parser.add_argument("--endpoint", required=True, help="Target LLM endpoint URL")
    parser.add_argument("--attack-type", choices=[t.value for t in AttackType], help="Specific attack type to run")
    parser.add_argument("--data-dir", default="data", help="Directory for attack data")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    
    attacker = LLMAttacker(args.endpoint, data_dir=args.data_dir)
    
    if args.attack_type:
        attack_type = AttackType(args.attack_type)
        result = attacker.run_specific_attack(attack_type, "")
        print(f"\nAttack Type: {result.attack_type.value}")
        print(f"Success: {result.success}")
        print(f"Response: {result.response}")
        print(f"Execution Time: {result.execution_time:.2f}s")
    else:
        results = attacker.run_all_attacks("")
        for result in results:
            print(f"\nAttack Type: {result.attack_type.value}")
            print(f"Success: {result.success}")
            print(f"Response: {result.response}")
            print(f"Execution Time: {result.execution_time:.2f}s")

if __name__ == "__main__":
    main() 